@page "/"
@inherits FrameworkPageBase
@{
    var d = DataContext;
}
<PageTitle>ワッチャプリマジ！アイテム一覧</PageTitle>
@if (d?.IsInitialized != true)
{
    <div class="container">
        <div>データを取得しています。</div>
    </div>
}
else
{
    <div class="container page-root">
        <div class="conditions">
            <IndexConditions DataContext="d" />

        </div>
        <div class="item-list">
            <div class="item-toolbar">
                <div class="item-toolbar-line">
                    <button class="btn @(d.Mode == IndexPageMode.Default ? "btn-primary" : "btn-outline-primary")"
                        @onclick="@(() => d.Mode = IndexPageMode.Default)">
                        アイコン
                    </button>
                    <button class="btn @(d.Mode == IndexPageMode.Table ? "btn-primary" : "btn-outline-primary")"
                        @onclick="@(() => d.Mode = IndexPageMode.Table)">
                        一覧
                    </button>
                    <button class="btn @(d.Mode == IndexPageMode.Summary ? "btn-primary" : "btn-outline-primary")"
                        @onclick="@(() => d.Mode = IndexPageMode.Summary)">
                        サマリー
                    </button>
                    <div class="btn-group">
                        <Checkbox @bind-IsChecked="d.HidesSpoiler">
                            ネタバレ非表示
                        </Checkbox>
                    </div>
                </div>
                @if (d.Mode != IndexPageMode.Default)
                {
                    <div class="item-toolbar-line">
                        <CommandButton DataContext="@d.SaveUserDataCommand" />
                        @if (d.Mode == IndexPageMode.Summary)
                        {
                            <div class="btn-group ml-4">
                                <CommandButton DataContext="@d.SelectIncrementPosessionCountCommand" />
                                <CommandButton DataContext="@d.SelectDecrementPosessionCountCommand" />
                                <CommandButton DataContext="@d.SelectClearPosessionCountCommand" />
                            </div>
                            <div class="btn-group">
                                <CommandButton DataContext="@d.SelectIncrementListingCountCommand" />
                                <CommandButton DataContext="@d.SelectDecrementListingCountCommand" />
                                <CommandButton DataContext="@d.SelectClearListingCountCommand" />
                            </div>
                            <div class="btn-group">
                                <CommandButton DataContext="@d.SelectIncrementTradingCountCommand" />
                                <CommandButton DataContext="@d.SelectDecrementTradingCountCommand" />
                                <CommandButton DataContext="@d.SelectClearTradingCountCommand" />
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="item-body">
                <IndexItemView DataContext="d" />
                <IndexTableView DataContext="d" />
                <IndexSummaryView DataContext="d" />
            </div>
        </div>
    </div>
}
@code
{
    protected override bool ImplicitRender => false;

    [Inject]
    public HttpClient? Http { get; set; }

    public new IndexPageViewModel DataContext => (IndexPageViewModel)base.DataContext;

    protected override FrameworkPageViewModel GetOrCreateDataContext()
        => base.DataContext as IndexPageViewModel ?? new IndexPageViewModel(this);

}